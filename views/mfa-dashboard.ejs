<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multi-Factor Authentication - <%= poolName || 'Identity Server' %></title>
    <link href="/css/bootstrap.min.css" rel="stylesheet">
    <link href="/css/bootstrap-icons.css" rel="stylesheet">
    <style>
        .mfa-card {
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }
        .mfa-card:hover {
            border-color: #0d6efd;
            transform: translateY(-2px);
        }
        .verified-badge {
            position: absolute;
            top: 10px;
            right: 10px;
        }
        .qr-container {
            max-width: 300px;
            margin: 0 auto;
        }
        .backup-codes {
            font-family: 'Courier New', monospace;
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            border: 1px solid #dee2e6;
        }
        .device-list-item {
            transition: all 0.2s ease;
        }
        .device-list-item:hover {
            background-color: #f8f9fa;
        }
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
        }
        .status-verified { background-color: #28a745; }
        .status-unverified { background-color: #ffc107; }
        .setup-wizard {
            max-width: 600px;
            margin: 0 auto;
        }
        .wizard-step {
            display: none;
        }
        .wizard-step.active {
            display: block;
        }
        .progress-indicator {
            height: 4px;
            background: #e9ecef;
            border-radius: 2px;
            margin-bottom: 30px;
        }
        .progress-bar {
            height: 100%;
            background: #0d6efd;
            border-radius: 2px;
            transition: width 0.3s ease;
        }
    </style>
</head>
<body class="bg-light">
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/">
                <i class="bi bi-shield-check"></i> Identity Server
            </a>
            <div class="navbar-nav ms-auto">
                <span class="navbar-text me-3">
                    <i class="bi bi-person-circle"></i> <%= user.email %>
                </span>
                <a class="nav-link" href="/auth/logout">
                    <i class="bi bi-box-arrow-right"></i> Logout
                </a>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <!-- Page Header -->
        <div class="row mb-4">
            <div class="col">
                <h1 class="h3 mb-1">
                    <i class="bi bi-shield-lock text-primary"></i>
                    Multi-Factor Authentication
                </h1>
                <p class="text-muted">Secure your account with additional verification methods</p>
            </div>
        </div>

        <!-- MFA Status Overview -->
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-8">
                                <h5 class="card-title mb-1">
                                    <i class="bi bi-info-circle text-info"></i>
                                    Security Status
                                </h5>
                                <div id="mfa-status-display">
                                    <div class="d-flex align-items-center">
                                        <span id="status-indicator" class="status-indicator"></span>
                                        <span id="status-text" class="fw-bold"></span>
                                    </div>
                                    <small id="status-details" class="text-muted"></small>
                                </div>
                            </div>
                            <div class="col-md-4 text-end">
                                <button id="setup-mfa-btn" class="btn btn-primary btn-lg" style="display: none;">
                                    <i class="bi bi-plus-circle"></i>
                                    Set Up MFA
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Device List -->
        <div class="row mb-4" id="device-list-section" style="display: none;">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="bi bi-devices text-primary"></i>
                            Your Authenticator Devices
                        </h5>
                        <button id="add-device-btn" class="btn btn-outline-primary btn-sm">
                            <i class="bi bi-plus"></i>
                            Add Device
                        </button>
                    </div>
                    <div class="card-body">
                        <div id="device-list">
                            <!-- Devices will be loaded here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Setup Wizard Modal -->
        <div class="modal fade" id="setupWizardModal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="bi bi-shield-plus"></i>
                            Set Up Multi-Factor Authentication
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="setup-wizard">
                            <!-- Progress Indicator -->
                            <div class="progress-indicator">
                                <div class="progress-bar" id="wizard-progress" style="width: 33%"></div>
                            </div>

                            <!-- Step 1: Device Name -->
                            <div class="wizard-step active" id="step-1">
                                <div class="text-center mb-4">
                                    <i class="bi bi-smartphone text-primary" style="font-size: 3rem;"></i>
                                    <h4 class="mt-3">Name Your Device</h4>
                                    <p class="text-muted">Give your authenticator device a memorable name</p>
                                </div>
                                <div class="mb-3">
                                    <label for="device-name" class="form-label">Device Name</label>
                                    <input type="text" class="form-control" id="device-name" 
                                           placeholder="e.g., iPhone, Personal Phone, Work Phone" 
                                           maxlength="50">
                                    <div class="form-text">Choose a name that helps you identify this device</div>
                                </div>
                            </div>

                            <!-- Step 2: QR Code -->
                            <div class="wizard-step" id="step-2">
                                <div class="text-center mb-4">
                                    <i class="bi bi-qr-code text-primary" style="font-size: 3rem;"></i>
                                    <h4 class="mt-3">Scan QR Code</h4>
                                    <p class="text-muted">Use your authenticator app to scan this QR code</p>
                                </div>
                                <div class="qr-container mb-4">
                                    <div id="qr-code-display" class="text-center">
                                        <!-- QR code will be displayed here -->
                                    </div>
                                </div>
                                <div class="alert alert-info">
                                    <h6><i class="bi bi-info-circle"></i> Recommended Apps:</h6>
                                    <ul class="mb-0">
                                        <li>Google Authenticator</li>
                                        <li>Microsoft Authenticator</li>
                                        <li>Authy</li>
                                        <li>1Password</li>
                                    </ul>
                                </div>
                            </div>

                            <!-- Step 3: Verification -->
                            <div class="wizard-step" id="step-3">
                                <div class="text-center mb-4">
                                    <i class="bi bi-key text-primary" style="font-size: 3rem;"></i>
                                    <h4 class="mt-3">Verify Setup</h4>
                                    <p class="text-muted">Enter the 6-digit code from your authenticator app</p>
                                </div>
                                <div class="mb-3">
                                    <label for="verification-code" class="form-label">Verification Code</label>
                                    <input type="text" class="form-control text-center" id="verification-code" 
                                           placeholder="000000" maxlength="6" style="font-size: 1.5rem; letter-spacing: 0.2em;">
                                    <div class="form-text">Enter the 6-digit code from your authenticator app</div>
                                </div>
                                <div id="verification-error" class="alert alert-danger" style="display: none;"></div>
                            </div>

                            <!-- Step 4: Backup Codes -->
                            <div class="wizard-step" id="step-4">
                                <div class="text-center mb-4">
                                    <i class="bi bi-file-text text-success" style="font-size: 3rem;"></i>
                                    <h4 class="mt-3 text-success">Setup Complete!</h4>
                                    <p class="text-muted">Save these backup codes in a safe place</p>
                                </div>
                                <div class="backup-codes mb-4" id="backup-codes-display">
                                    <!-- Backup codes will be displayed here -->
                                </div>
                                <div class="alert alert-warning">
                                    <h6><i class="bi bi-exclamation-triangle"></i> Important:</h6>
                                    <ul class="mb-0">
                                        <li>Store these codes in a safe place</li>
                                        <li>Each code can only be used once</li>
                                        <li>Use them if you lose access to your authenticator device</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" id="wizard-back" style="display: none;">
                            <i class="bi bi-arrow-left"></i> Back
                        </button>
                        <button type="button" class="btn btn-primary" id="wizard-next">
                            Next <i class="bi bi-arrow-right"></i>
                        </button>
                        <button type="button" class="btn btn-success" id="wizard-finish" style="display: none;" data-bs-dismiss="modal">
                            <i class="bi bi-check-circle"></i> Finish
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Device Rename Modal -->
        <div class="modal fade" id="renameDeviceModal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Rename Device</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="new-device-name" class="form-label">New Device Name</label>
                            <input type="text" class="form-control" id="new-device-name" maxlength="50">
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="save-device-name">Save Changes</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="/js/bootstrap.bundle.min.js"></script>
    <script>
        // Configuration
        const config = {
            userId: '<%= user.id %>',
            poolId: '<%= user.poolId %>',
            apiBase: '/api/mfa'
        };

        // Initial user state
        const initialUserState = {
            mfaEnabled: <%= user.mfaEnabled ? 'true' : 'false' %>
        };

        // State
        let currentStep = 1;
        let setupData = null;
        let devices = <%- JSON.stringify(devices || []) %>;
        let currentDeviceId = null;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize with server-provided data
            updateStatusDisplay({ mfaEnabled: initialUserState.mfaEnabled });
            if (devices.length > 0) {
                renderDevices();
            }
            
            loadMfaStatus(); // Still load fresh status from API
            setupEventListeners();
        });

        function setupEventListeners() {
            // Setup buttons
            document.getElementById('setup-mfa-btn').addEventListener('click', startSetupWizard);
            document.getElementById('add-device-btn').addEventListener('click', startSetupWizard);

            // Wizard navigation
            document.getElementById('wizard-next').addEventListener('click', nextStep);
            document.getElementById('wizard-back').addEventListener('click', previousStep);
            document.getElementById('wizard-finish').addEventListener('click', finishSetup);

            // Device rename
            document.getElementById('save-device-name').addEventListener('click', saveDeviceName);

            // Auto-format verification code
            document.getElementById('verification-code').addEventListener('input', function(e) {
                let value = e.target.value.replace(/\D/g, '');
                if (value.length > 6) value = value.slice(0, 6);
                e.target.value = value;
            });
        }

        async function loadMfaStatus() {
            try {
                const response = await fetch(`${config.apiBase}/status/${config.poolId}/${config.userId}`);
                const data = await response.json();
                
                if (data.success) {
                    updateStatusDisplay(data);
                    if (data.mfaEnabled) {
                        await loadDevices();
                    }
                }
            } catch (error) {
                console.error('Error loading MFA status:', error);
                showError('Failed to load MFA status');
            }
        }

        function updateStatusDisplay(status) {
            const indicator = document.getElementById('status-indicator');
            const text = document.getElementById('status-text');
            const details = document.getElementById('status-details');
            const setupBtn = document.getElementById('setup-mfa-btn');
            const deviceSection = document.getElementById('device-list-section');

            if (status.mfaEnabled) {
                indicator.className = 'status-indicator status-verified';
                text.textContent = 'MFA Enabled';
                text.className = 'fw-bold text-success';
                details.textContent = `${status.verifiedDeviceCount} of ${status.deviceCount} devices verified`;
                setupBtn.style.display = 'none';
                deviceSection.style.display = 'block';
            } else {
                indicator.className = 'status-indicator status-unverified';
                text.textContent = 'MFA Not Enabled';
                text.className = 'fw-bold text-warning';
                details.textContent = 'Your account is not protected by multi-factor authentication';
                setupBtn.style.display = 'block';
                deviceSection.style.display = 'none';
            }
        }

        async function loadDevices() {
            try {
                const response = await fetch(`${config.apiBase}/devices/${config.poolId}/${config.userId}`);
                const data = await response.json();
                
                if (data.success) {
                    devices = data.devices;
                    renderDevices();
                }
            } catch (error) {
                console.error('Error loading devices:', error);
                showError('Failed to load devices');
            }
        }

        function renderDevices() {
            const container = document.getElementById('device-list');
            
            if (devices.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-4 text-muted">
                        <i class="bi bi-device-ssd" style="font-size: 2rem;"></i>
                        <p class="mt-2">No devices configured</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = devices.map(device => `
                <div class="device-list-item p-3 border rounded mb-2">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <div class="d-flex align-items-center">
                                <span class="status-indicator ${device.isVerified ? 'status-verified' : 'status-unverified'}"></span>
                                <div>
                                    <h6 class="mb-1">${escapeHtml(device.deviceName)}</h6>
                                    <small class="text-muted">
                                        ${device.deviceType} • 
                                        ${device.isVerified ? 'Verified' : 'Pending verification'} • 
                                        Added ${new Date(device.createdAt).toLocaleDateString()}
                                        ${device.lastUsed ? ` • Last used ${new Date(device.lastUsed).toLocaleDateString()}` : ''}
                                    </small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 text-end">
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary" onclick="renameDevice('${device.deviceId}', '${escapeHtml(device.deviceName)}')">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-outline-danger" onclick="removeDevice('${device.deviceId}', '${escapeHtml(device.deviceName)}')">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function startSetupWizard() {
            currentStep = 1;
            setupData = null;
            document.getElementById('device-name').value = '';
            document.getElementById('verification-code').value = '';
            updateWizardStep();
            
            const modal = new bootstrap.Modal(document.getElementById('setupWizardModal'));
            modal.show();
        }

        async function nextStep() {
            if (currentStep === 1) {
                const deviceName = document.getElementById('device-name').value.trim();
                if (!deviceName) {
                    showError('Please enter a device name');
                    return;
                }
                
                // Start MFA setup
                try {
                    const response = await fetch(`${config.apiBase}/setup`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            userId: config.userId,
                            poolId: config.poolId,
                            deviceName: deviceName
                        })
                    });
                    
                    const data = await response.json();
                    if (data.success) {
                        setupData = data;
                        displayQrCode(data.qrCode);
                        currentStep = 2;
                        updateWizardStep();
                    } else {
                        showError(data.error || 'Failed to setup MFA');
                    }
                } catch (error) {
                    console.error('Setup error:', error);
                    showError('Failed to setup MFA');
                }
            } else if (currentStep === 2) {
                currentStep = 3;
                updateWizardStep();
            } else if (currentStep === 3) {
                const code = document.getElementById('verification-code').value.trim();
                if (code.length !== 6) {
                    showError('Please enter a 6-digit verification code');
                    return;
                }
                
                // Verify code
                try {
                    const response = await fetch(`${config.apiBase}/verify-setup`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            userId: config.userId,
                            poolId: config.poolId,
                            deviceId: setupData.deviceId,
                            totpCode: code
                        })
                    });
                    
                    const data = await response.json();
                    if (data.success) {
                        displayBackupCodes(setupData.backupCodes);
                        currentStep = 4;
                        updateWizardStep();
                    } else {
                        document.getElementById('verification-error').style.display = 'block';
                        document.getElementById('verification-error').textContent = data.error || 'Invalid verification code';
                    }
                } catch (error) {
                    console.error('Verification error:', error);
                    showError('Failed to verify code');
                }
            }
        }

        function previousStep() {
            if (currentStep > 1) {
                currentStep--;
                updateWizardStep();
            }
        }

        function updateWizardStep() {
            // Hide all steps
            document.querySelectorAll('.wizard-step').forEach(step => step.classList.remove('active'));
            
            // Show current step
            document.getElementById(`step-${currentStep}`).classList.add('active');
            
            // Update progress
            const progress = (currentStep / 4) * 100;
            document.getElementById('wizard-progress').style.width = progress + '%';
            
            // Update buttons
            const backBtn = document.getElementById('wizard-back');
            const nextBtn = document.getElementById('wizard-next');
            const finishBtn = document.getElementById('wizard-finish');
            
            backBtn.style.display = currentStep > 1 ? 'block' : 'none';
            nextBtn.style.display = currentStep < 4 ? 'block' : 'none';
            finishBtn.style.display = currentStep === 4 ? 'block' : 'none';
            
            if (currentStep === 3) {
                nextBtn.innerHTML = '<i class="bi bi-check-circle"></i> Verify';
            } else {
                nextBtn.innerHTML = 'Next <i class="bi bi-arrow-right"></i>';
            }
            
            // Clear errors
            document.getElementById('verification-error').style.display = 'none';
        }

        function displayQrCode(qrCodeDataUrl) {
            document.getElementById('qr-code-display').innerHTML = `
                <img src="${qrCodeDataUrl}" alt="QR Code" class="img-fluid border rounded" style="max-width: 250px;">
            `;
        }

        function displayBackupCodes(codes) {
            const codesHtml = codes.map((code, index) => 
                `<div class="row"><div class="col-6 text-muted">${index + 1}.</div><div class="col-6 fw-bold">${code}</div></div>`
            ).join('');
            
            document.getElementById('backup-codes-display').innerHTML = codesHtml;
        }

        function finishSetup() {
            // Reload the page to refresh the status
            window.location.reload();
        }

        function renameDevice(deviceId, currentName) {
            currentDeviceId = deviceId;
            document.getElementById('new-device-name').value = currentName;
            
            const modal = new bootstrap.Modal(document.getElementById('renameDeviceModal'));
            modal.show();
        }

        async function saveDeviceName() {
            const newName = document.getElementById('new-device-name').value.trim();
            if (!newName) {
                showError('Please enter a device name');
                return;
            }
            
            if (newName.length > 50) {
                showError('Device name must be 50 characters or less');
                return;
            }

            try {
                const response = await fetch(`${config.apiBase}/device/${config.poolId}/${config.userId}/${currentDeviceId}/rename`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ deviceName: newName })
                });
                
                const data = await response.json();
                if (data.success) {
                    await loadDevices(); // Reload the device list
                    bootstrap.Modal.getInstance(document.getElementById('renameDeviceModal')).hide();
                    showSuccess('Device renamed successfully');
                } else {
                    showError(data.error || 'Failed to rename device');
                }
            } catch (error) {
                console.error('Rename device error:', error);
                showError('Failed to rename device');
            }
        }

        async function removeDevice(deviceId, deviceName) {
            if (!confirm(`Are you sure you want to remove "${deviceName}"? This action cannot be undone.`)) {
                return;
            }
            
            try {
                const response = await fetch(`${config.apiBase}/device/${config.poolId}/${config.userId}/${deviceId}`, {
                    method: 'DELETE'
                });
                
                const data = await response.json();
                if (data.success) {
                    await loadMfaStatus();
                    if (devices.length > 0) {
                        await loadDevices();
                    }
                    showSuccess('Device removed successfully');
                } else {
                    showError(data.error || 'Failed to remove device');
                }
            } catch (error) {
                console.error('Remove device error:', error);
                showError('Failed to remove device');
            }
        }

        function showError(message) {
            // Simple alert for now - could be enhanced with toast notifications
            alert('Error: ' + message);
        }

        function showSuccess(message) {
            // Simple alert for now - could be enhanced with toast notifications
            alert('Success: ' + message);
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
    </script>
</body>
</html>
